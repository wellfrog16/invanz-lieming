var E2Engine = E2Engine || (function () {
  var b;
  var f;
  var a;
  CanvasMoveBool = true;
  CanvasMove = true;
  AutoControlPage = false;
  var e = 160;
  var d = 1;
  var c = - 1;
  setMinPageNumber = function (g) {
    if (g) {
      d = g
    }
    return d
  };
  setMaxPageNumber = function (g) {
    if (g) {
      c = g
    }
    return c
  };
  setControlPageMoveX = function (g) {
    if (g) {
      e = g
    }
    return e
  };
  Start = function () {
    try {
      if (window.devicePixelRatio == 1 && canvas) {
        Config.CanvasScale = canvas.width > Config.width ? 0.5 : 1;
        e *= Config.CanvasScale;
        canvas.width = Config.width;
        canvas.height = Config.height
      }
    } catch (g) {
    }
    document.addEventListener("StartEvent", startMoveCanvas, false);
    document.addEventListener('onorientationchange', function (h) {
      h.preventDefault()
    }, false)
  };
  startMoveCanvas = function (g) {
    try {
      b = stage.x
    } catch (g) {
    }
    a = f = g.pageX;
    document.addEventListener(MoveEvent, moveCanvas, false);
    document.addEventListener(EndEvent, endMoveCanvas, false)
  };
  moveCanvas = function (g) {
    a = g.pageX;
    if (!CanvasMoveBool || !CanvasMove) {
      g.preventDefault();
      return
    }
    try {
      stage.x = b + a - f
    } catch (g) {
    }
    g.preventDefault()
  };
  endMoveCanvas = function (g) {
    document.removeEventListener(MoveEvent, moveCanvas, false);
    document.removeEventListener(EndEvent, endMoveCanvas, false);
    if (AutoControlPage) {
      if (a - f >= e) {
        try {
          if (GesturePageFunction) {
            GesturePageFunction(getHrefNumber(), 'prevPage')
          }
        } catch (g) {
        }
        if (E2Engine.DisableVeevaControlSlide != undefined && E2Engine.DisableVeevaControlSlide == true) {
          return
        }
        try {
          com.veeva.clm.prevSlide()
        } catch (g) {
        }
      } else {
        if (a - f <= - e) {
          try {
            if (GesturePageFunction) {
              GesturePageFunction(getHrefNumber(), 'nextPage')
            }
          } catch (g) {
          }
          if (E2Engine.DisableVeevaControlSlide != undefined && E2Engine.DisableVeevaControlSlide == true) {
            return
          }
          try {
            com.veeva.clm.nextSlide()
          } catch (g) {
          }
        }
      }
    }
    if (!CanvasMoveBool) {
      return
    }
    try {
      if (stage.x != 0) {
        createjs.Tween.get(stage, {
          override: true
        }).to({
          x: 0
        }, 500, createjs.Ease.cubicOut)
      }
    } catch (g) {
    }
  };
  getHrefNumber = function () {
    var g = document.location.href;
    var l = g.substring(g.lastIndexOf('/') + 1, g.length - 5);
    var h;
    if (l.lastIndexOf('-') != - 1) {
      var k = l.split('-');
      if (k.length) {
        cacheStr = l;
        h = k[k.length - 1];
        if (String(Number(h)) != 'NaN') {
          var j = new RegExp(',', 'g');
          k[k.length - 1] = Number(h) + 1;
          nextPath = k.toString();
          nextPath = nextPath.replace(j, '-');
          k[k.length - 1] = Number(h) - 1;
          prenPath = k.toString();
          prenPath = prenPath.replace(j, '-')
        } else {
          h = l.replace(/[^0-9]/gi, '');
          var j = new RegExp(h, 'g');
          nextPath = l.replace(j, Number(h) + 1);
          prenPath = l.replace(j, Number(h) - 1)
        }
      }
    } else {
      cacheStr = l;
      h = l.replace(/[^0-9]/gi, '');
      var j = new RegExp(h, 'g');
      nextPath = l.replace(j, Number(h) + 1);
      prenPath = l.replace(j, Number(h) - 1)
    }
    if (c == Number(h) && c != - 1) {
      nextPath = ''
    }
    if (d == Number(h)) {
      prenPath = ''
    }
    return {
      pageNumber: h,
      headName: cacheStr,
      nextPath: nextPath,
      prenPath: prenPath
    }
  };

  nextPage = function () {
    var g = getHrefNumber();
    try {
      if (GesturePageFunction) {
        GesturePageFunction(g, 'nextPage')
      }
    } catch (h) {
    }
    if (g.nextPath.length) {
      document.location = 'veeva:gotoSlide(' + g.nextPath + '.zip)'
    }
  };
  prevPage = function () {
    var g = getHrefNumber();
    try {
      if (GesturePageFunction) {
        GesturePageFunction(g, 'prevPage')
      }
    } catch (h) {
    }
    if (g.prenPath.length) {
      document.location = 'veeva:gotoSlide(' + g.prenPath + '.zip)'
    }
  };
  gotoSliderVeeva = function (h) {
    endMoveCanvas();
    var g = arguments;
    g[0] = h + '.zip';
    com.veeva.clm.gotoSlide.apply(com.veeva.clm, g)
  };
  childDivView = function (k, g, h) {
    var h = h || 'div';
    var j = document.createElement(h);
    if (k) {
      j.setAttribute('id', k)
    }
    if (g) {
      j.className = g
    }
    return j
  };
  OpenRefListView = function (g, r) {
    CanvasMoveBool = false;
    var s = g.concat();
    var t = t || document.body.appendChild(childDivView('maskView'));
    var k = document.body.appendChild(childDivView('ReferenceListView'));
    var j = k.appendChild(childDivView('RefTitleView'));
    j.innerHTML = r ? r : Config.RefTitleName;
    var h = j.appendChild(childDivView('RefClose', 'floatright', 'span'));
    var l = k.appendChild(childDivView('RefListView'));
    var n = l.appendChild(childDivView('scroller'));
    var o = s.length;
    var q = '<ul>';
    for (i = 0; i < o; i++) {
      q += '<li id=\'reflist_' + i + '\'>' + s[i].info + '</li>'
    }
    q += '</ul>';
    n.innerHTML = q;
    var u = new IScroll('#RefListView', {
      scrollX: true,
      scrollbars: true,
      mouseWheel: true,
      interactiveScrollbars: true
    });
    k.style.top = ((Config.height - k.offsetHeight) * 0.5) + 'px';
    k.style.left = ((Config.width - k.offsetWidth) * 0.5) + 'px';
    ProxyClick(null, h, function () {
      t.parentNode.removeChild(t);
      k.parentNode.removeChild(k);
      CanvasMoveBool = true
	  AutoControlPage = true;
    });
    var m = n.getElementsByTagName('li');
    for (i = 0; i < m.length; i++) {
      ProxyClick(null, m[i], function () {
        var v = s[this.id.split('_') [1]];
        if (ObjectType(v) == 'string' && v == '') {
          return
        } else {
          if (ObjectType(v) == 'object') {
            if (v.model == 'video') {
              OpenVideo(v.info)
            } else {
              if (v.file && v.file != '' && v.file != null) {
                childReferenceView(v)
              }
            }
          }
        }
      })
    }
  };
  childReferenceView = function (n) {
    CanvasMoveBool = false;
    if (n.type == 'nolist') {
      var o = o || document.body.appendChild(childDivView('maskView'))
    }
    var h = document.body.appendChild(childDivView('ReferenceView'));
    var j = h.appendChild(childDivView('RefTitleView'));
    j.innerHTML = n.info;
    var g = j.appendChild(childDivView('RefClose', 'floatright', 'span'));
    var k = h.appendChild(childDivView('RefMainView'));
    var m = k.appendChild(childDivView('scroller'));
    h.style.top = ((Config.height - h.offsetHeight) * 0.5) + 'px';
    h.style.left = ((Config.width - h.offsetWidth) * 0.5) + 'px';
    ProxyClick(null, g, function (r) {
      if (n.type == 'nolist') {
        o.parentNode.removeChild(o);
        CanvasMoveBool = true
      }
      h.parentNode.removeChild(h)
    });
    var q = n.file.substring(n.file.lastIndexOf('.') + 1, n.file.length).toLowerCase();
    if (q == 'jpg' || q == 'png') {
      var l = m.appendChild(childDivView('RefImage', null, 'img'));
      l.setAttribute('src', n.file);
      l.onload = function () {
        m.style.width = this.offsetWidth + 'px';
        var r = new IScroll('#RefMainView', {
          scrollX: true,
          scrollbars: true,
          mouseWheel: true,
          interactiveScrollbars: true
        })
      }
    } else {
      if (q == 'pdf') {
        if (n.type == 'nolist') {
          o.parentNode.removeChild(o);
          CanvasMoveBool = true
        }
        h.parentNode.removeChild(h);
        document.location = n.file
      } else {
        m.innerHTML = n.file
      }
    }
  };
  OpenVideo = function (k) {
    CanvasMoveBool = false;
    var q = q || document.body.appendChild(childDivView('maskView'));
    UI.show(q);
    var j = document.body.appendChild(childDivView('ReferenceListView'));
    var h = j.appendChild(childDivView('RefTitleView'));
    h.innerHTML = k.title;
    var g = h.appendChild(childDivView('RefClose', 'floatright', 'span'));
    var n = j.appendChild(childDivView('RefListView'));
    if (!k.width) {
      k.width = n.offsetWidth
    }
    if (!k.height) {
      k.height = n.offsetHeight
    }
    var l = k.autoPlay ? 'autoplay' : '';
    var o = k.controls ? k.controls : 'controls';
    var m = '<video id=\'introVid\' width=\'' + k.width + '\' height=\'' + k.height + '\' ' + o + ' ' + l + '>';
    if (k.src == Array) {
      for (i = 0; i < k.src.length; i++) {
        m += '<source  src=\'' + k.src[i].src + '\' type=\'' + k.src[i].type + '\' />'
      }
    } else {
      m += '<source  src=\'' + k.src + '\' type=\'video/mp4\' />'
    }
    m += Config.NoVideo;
    m += '</video>';
    n.innerHTML = m;
    j.style.width = k.width + 'px';
    n.style.width = k.width + 'px';
    n.style.height = k.height + 'px';
    j.style.top = ((Config.height - j.offsetHeight) * 0.5) + 'px';
    j.style.left = ((Config.width - j.offsetWidth) * 0.5) + 'px';
    ProxyClick(null, g, function (r) {
      q.parentNode.removeChild(q);
      j.parentNode.removeChild(j);
      CanvasMoveBool = true
    })
  };
  addVideo = function (l) {
    var g = document.body.appendChild(childDivView(l.id));
    var k = l.autoPlay ? 'autoplay' : '';
    var h = l.controls ? 'controls' : '';
    var j = '<video width=\'' + l.width + '\' height=\'' + l.height + '\' ' + h + ' ' + k + '>';
    if (l.src == Array) {
      for (i = 0; i < l.src.length; i++) {
        j += '<source  src=\'' + l.src[i].src + '\' type=\'' + l.src[i].type + '\' />'
      }
    } else {
      j += '<source  src=\'' + l.src + '\' type=\'video/mp4\' />'
    }
    j += Config.NoVideo;
    j += '</video>';
    g.innerHTML = j;
    g.style.position = 'absolute';
    g.style.width = l.width + 'px';
    g.style.height = l.height + 'px';
    g.style.top = l.y + 'px';
    g.style.left = l.x + 'px'
  };
  addRefBtn = function (h, g) {
    ProxyClick(g ? g : exportRoot, h, function (l) {
      var j = l.target.info;
      if (!j) {
        j = l.currentTarget.info
      }
      var k = l.target.title;
      if (!k) {
        k = l.currentTarget.title
      }
      if (j.constructor == Array) {
        OpenRefListView(j, k)
      } else {
        childReferenceView({
          file: j,
          info: k ? k : Config.RefTitleMore,
          type: 'nolist'
        })
      }
    })
  };
  addVideoBtn = function (h, g) {
    ProxyClick(g ? g : exportRoot, h, function (k) {
      var j = k.target.info;
      if (!j) {
        j = k.currentTarget.info
      }
      OpenVideo(j)
    })
  };
  EdgePlay = function () {
    var g = [
    ];
    try {
      for (var h in AdobeEdge.compositions) {
        if (AdobeEdge.compositions.hasOwnProperty(h)) {
          g.push(h)
        }
      }
    } catch (l) {
    }
    if (!g.length) {
      setTimeout(EdgePlay, 10);
      return
    }
    var j = AdobeEdge.getComposition(g[0]);
    j.getStage().play()
  };
  EdgeSimulation = function () {
    window.EDoc = window.EDoc || {
    };
    EDoc.show_page = function (h) {
      var g = h.toString().indexOf('.html') != - 1 ? '' : '.html';
      document.location = h + g
    };
    EDoc.show_pdf = function (g) {
    };
    EDoc.native_log = function (g) {
    }
  };
  return {
    Start: Start,
    OpenRefListView: OpenRefListView,
    addVideo: addVideo,
    childDivView: childDivView,
    childReferenceView: childReferenceView,
    addRefBtn: addRefBtn,
    addVideoBtn: addVideoBtn,
    nextPage: nextPage,
    prevPage: prevPage,
    MinPageNumber: setMinPageNumber,
    MaxPageNumber: setMaxPageNumber,
    ControlPageMoveX: setControlPageMoveX,
    hrefInfo: getHrefNumber,
    EdgePlay: EdgePlay,
    EdgeSimulation: EdgeSimulation
  }
}) ();
var UI = UI || {
  hide: function (a) {
    a.style.visibility = 'hidden';
    a.style.display = 'none'
  },
  show: function (a) {
    a.style.visibility = 'visible';
    a.style.display = 'block'
  }
};
function ProxyClick(d, b, a) {
  var c = d == null ? b : d == 'exportRoot' ? exportRoot[b] : d[b];
  if (b == c) {
	  if(c){
    	c.onclick = a;
    	new E2NDClick(c)
	  }
  } else {
    if (!c.hasEventListener('click')) {
      c.addEventListener('click', a, false)
    }
  }
}
function E2NDClick(a) {
  this.element = typeof a == 'object' ? a : document.getElementById(a);
  if (window.Touch) {
    this.element.addEventListener('touchstart', this, false)
  }
}
E2NDClick.prototype = {
  handleEvent: function (a) {
    switch (a.type) {
      case 'touchstart':
        this.onTouchStart(a);
        break;
      case 'touchmove':
        this.onTouchMove(a);
        break;
      case 'touchend':
        this.onTouchEnd(a);
        break
    }
  },
  onTouchStart: function (a) {
    a.preventDefault();
    this.moved = false;
    this.theTarget = document.elementFromPoint(a.targetTouches[0].clientX, a.targetTouches[0].clientY);
    if (this.theTarget.nodeType == 3) {
      this.theTarget = theTarget.parentNode
    }
    this.theTarget.className += ' pressed';
    this.element.addEventListener('touchmove', this, false);
    this.element.addEventListener('touchend', this, false)
  },
  onTouchMove: function (a) {
    this.moved = true;
    this.theTarget.className = this.theTarget.className.replace(/ ?pressed/gi, '')
  },
  onTouchEnd: function (a) {
    this.element.removeEventListener('touchmove', this, false);
    this.element.removeEventListener('touchend', this, false);
    if (!this.moved && this.theTarget) {
      this.theTarget.className = this.theTarget.className.replace(/ ?pressed/gi, '');
      var b = document.createEvent('MouseEvents');
      b.initEvent('click', true, true);
      this.theTarget.dispatchEvent(b)
    }
    this.theTarget = undefined
  }
};
(function () {
  var f = !!(window.attachEvent && !window.opera);
  var e = /webkit\/(\d+)/i.test(navigator.userAgent) && (RegExp.$1 < 525);
  var a = [
  ];
  var b = function () {
    for (var d = 0; d < a.length; d++) {
      a[d]()
    }
  };
  var c = document;
  c.ready = function (g) {
    if (!f && !e && c.addEventListener) {
      return c.addEventListener('DOMContentLoaded', g, false)
    }
    if (a.push(g) > 1) {
      return
    }
    if (f) {
      (function () {
        try {
          c.documentElement.doScroll('left');
          b()
        } catch (h) {
          setTimeout(arguments.callee, 0)
        }
      }) ()
    } else {
      if (e) {
        var d = setInterval(function () {
          if (/^(loaded|complete)$/.test(c.readyState)) {
            clearInterval(d),
            b()
          }
        }, 0)
      }
    }
  }
}) ();
function ObjectType(b) {
  var a;
  return ((a = typeof (b)) == 'object' ? b == null && 'null' || Object.prototype.toString.call(b).slice(8, - 1)  : a).toLowerCase()
}
var JSON = JSON || {
};
JSON.stringify = JSON.stringify || function (e) {
  var d = typeof (e);
  if (d != 'object' || e === null) {
    if (d == 'string') {
      e = '"' + e + '"'
    }
    return String(e)
  } else {
    var f,
    b,
    c = [
    ],
    a = (e && e.constructor == Array);
    for (f in e) {
      b = e[f];
      d = typeof (b);
      if (d == 'string') {
        b = '"' + b + '"'
      } else {
        if (d == 'object' && b !== null) {
          b = JSON.stringify(b)
        }
      }
      c.push((a ? '' : '"' + f + '":') + String(b))
    }
    return (a ? '[' : '{') + String(c) + (a ? ']' : '}')
  }
};
JSON.parse = JSON.parse || function (str) {
  if (str === '') {
    str = '""'
  }
  eval('var p=' + str + ';');
  return p
};
